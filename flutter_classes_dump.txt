// === File: main.dart ===
import 'package:fllutterwebservice/features/photos/data/datasource/photo_api_datasource.dart';
import 'package:fllutterwebservice/features/photos/data/photo_repository_impl.dart';
import 'package:fllutterwebservice/features/photos/domain/usecases/search_photos_usecase.dart';
import 'package:fllutterwebservice/features/photos/presentation/bloc/photo_bloc.dart';
import 'package:fllutterwebservice/features/photos/presentation/pages/photo_detail_page.dart';
import 'package:fllutterwebservice/features/photos/presentation/pages/photo_home_page.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'app/themes/app_theme.dart';
// Importamos nuestro tema personalizado

void main() {
  runApp(const MainApp());
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    // Inyección manual de dependencias
    final photoApiDataSource = PhotoApiDataSource();
    final photoRepository = PhotoRepositoryImpl(photoApiDataSource);
    final searchPhotosUseCase = SearchPhotosUseCase(photoRepository);

    return BlocProvider(
      create: (_) => PhotoBloc(searchPhotosUseCase),
      child: MaterialApp(
        title: 'Pixabay App',
        debugShowCheckedModeBanner: false,
        theme: AppTheme.lightTheme,
        initialRoute: '/',
        routes: {
          '/': (context) => const PhotoHomePage(),
          '/detail': (context) => const PhotoDetailPage(),
        },
      ),
    );
  }
}


// === File: app/themes/app_theme.dart ===
import 'package:flutter/material.dart';
import 'app_colors.dart';  // Asegúrate de importar el archivo de colores

class AppTheme {
  static ThemeData get lightTheme {
    return ThemeData(
      primarySwatch: Colors.indigo,
      primaryColor: AppColors.indigoBase,
      scaffoldBackgroundColor: AppColors.lightBackground,
      appBarTheme: AppBarTheme(
        backgroundColor: AppColors.indigoBase,
        titleTextStyle: TextStyle(
          color: Colors.white,
          fontWeight: FontWeight.bold,
        ),
      ),
      textTheme: TextTheme(
        bodyLarge: TextStyle(color: AppColors.primaryText),  // Para textos grandes
        bodyMedium: TextStyle(color: AppColors.secondaryText),  // Textos estándar
      ),
      buttonTheme: ButtonThemeData(
        buttonColor: AppColors.buttonColor,
        textTheme: ButtonTextTheme.primary,
      ),
      iconTheme: IconThemeData(
        color: AppColors.iconColor,
      ),
      cardColor: AppColors.lightBackground,
      dividerColor: AppColors.secondaryText,
    );
  }
}


// === File: app/themes/app_colors.dart ===
import 'package:flutter/material.dart';

class AppColors {
  // Colores principales
  static const Color indigoBase = Color(0xFF3F51B5);  // Color de fondo principal
  static const Color lightBackground = Color(0xFFF5F5F5);  // Fondo claro
  static const Color darkBackground = Color(0xFF303030);  // Fondo oscuro
  
  // Colores del texto
  static const Color primaryText = Color(0xFF212121);  // Texto principal
  static const Color secondaryText = Color(0xFF757575);  // Texto secundario
  
  // Colores de botones y acciones
  static const Color buttonColor = Color(0xFFFF4081);  // Color de botón/acción
  static const Color iconColor = Color(0xFF3046C4);  // Color de iconos
}

// === File: features/photos/data/photo_repository_impl.dart ===
// Implementación del repositorio que convierte PhotoModel a Photo

import 'package:fllutterwebservice/features/photos/domain/entities/photo.dart';
import 'package:fllutterwebservice/features/photos/domain/repository/photo_repository.dart';

import 'datasource/photo_api_datasource.dart';

class PhotoRepositoryImpl implements PhotoRepository {
  final PhotoApiDataSource api;

  PhotoRepositoryImpl(this.api);

  @override
  Future<List<Photo>> searchPhotos(String query) async {
    final models = await api.searchPhotos(query);
    return models
        .map((model) => Photo(
              id: model.id,
              title: model.tags,
              thumbnailUrl: model.previewURL,
              imageUrl: model.largeImageURL,
              views: model.views,
              downloads: model.downloads,
            ))
        .toList();
  }
}


// === File: features/photos/data/datasource/photo_api_datasource.dart ===
// Fuente de datos que se conecta a la API de Pixabay

import 'dart:convert';
import 'package:fllutterwebservice/features/photos/data/models/photo_model.dart';
import 'package:http/http.dart' as http;

class PhotoApiDataSource {
  final String _apiKey = '50259145-bf60859095b70472804f712d3';

  Future<List<PhotoModel>> searchPhotos(String query) async {
    final url = Uri.parse(
      'https://pixabay.com/api/?key=$_apiKey&q=$query&image_type=photo',
    );

    final response = await http.get(url);

    if (response.statusCode == 200) {
      final body = json.decode(response.body);
      final hits = body['hits'] as List;
      return hits.map((json) => PhotoModel.fromJson(json)).toList();
    } else {
      throw Exception('Error fetching photos');
    }
  }
}


// === File: features/photos/data/models/photo_model.dart ===
// Modelo que representa una foto recibida desde la API de Pixabay

class PhotoModel {
  final int id;
  final String tags;
  final String previewURL;
  final String webformatURL;
  final String largeImageURL;
  final int views;
  final int downloads;

  PhotoModel({
    required this.id,
    required this.tags,
    required this.previewURL,
    required this.webformatURL,
    required this.largeImageURL,
    required this.views,
    required this.downloads,
  });

  // Factory para construir una instancia desde un JSON
  factory PhotoModel.fromJson(Map<String, dynamic> json) {
    return PhotoModel(
      id: json['id'],
      tags: json['tags'],
      previewURL: json['previewURL'],
      webformatURL: json['webformatURL'],
      largeImageURL: json['largeImageURL'],
      views: json['views'],
      downloads: json['downloads'],
    );
  }
}


// === File: features/photos/domain/repository/photo_repository.dart ===
// Interfaz que define los métodos que debe cumplir cualquier repositorio de fotos

import 'package:fllutterwebservice/features/photos/domain/entities/photo.dart';

abstract class PhotoRepository {
  Future<List<Photo>> searchPhotos(String query);
}


// === File: features/photos/domain/usecases/search_photos_usecase.dart ===
// Caso de uso que ejecuta la búsqueda de fotos mediante el repositorio

import 'package:fllutterwebservice/features/photos/domain/entities/photo.dart';
import 'package:fllutterwebservice/features/photos/domain/repository/photo_repository.dart';

class SearchPhotosUseCase {
  final PhotoRepository repository;

  SearchPhotosUseCase(this.repository);

  // Ejecuta la búsqueda y devuelve una lista de fotos
  Future<List<Photo>> execute(String query) async {
    return await repository.searchPhotos(query);
  }
}


// === File: features/photos/domain/entities/photo.dart ===
// Entidad del dominio, una representación limpia y reutilizable de una foto

class Photo {
  final int id;
  final String title;
  final String thumbnailUrl;
  final String imageUrl;
  final int views;
  final int downloads;

  Photo({
    required this.id,
    required this.title,
    required this.thumbnailUrl,
    required this.imageUrl,
    required this.views,
    required this.downloads,
  });
}


// === File: features/photos/presentation/pages/photo_home_page.dart ===
import 'package:fllutterwebservice/features/photos/presentation/widgets/photo_card.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'package:fllutterwebservice/features/photos/presentation/bloc/photo_bloc.dart';
import 'package:fllutterwebservice/features/photos/presentation/bloc/photo_event.dart';
import 'package:fllutterwebservice/features/photos/presentation/bloc/photo_state.dart';

class PhotoHomePage extends StatefulWidget {
  const PhotoHomePage({super.key});

  @override
  State<PhotoHomePage> createState() => _PhotoHomePageState();
}

class _PhotoHomePageState extends State<PhotoHomePage> {
  final TextEditingController _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Buscador fotos',
          style: TextStyle(
            fontSize: 18, // Aumentamos el tamaño de la fuente
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: Column(
        children: [
          // Barra de búsqueda
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _controller,
                    decoration: InputDecoration(
                      hintText: 'Buscar',
                      prefixIcon: const Icon(Icons.search), // Ícono de lupa a la izquierda
                      border: OutlineInputBorder(),
                    ),
                    onSubmitted: (query) {
                      final trimmedQuery = query.trim();
                      if (trimmedQuery.isNotEmpty) {
                        context.read<PhotoBloc>().add(SearchPhotosEvent(trimmedQuery));
                      }
                    },
                  ),
                ),
              ],
            ),
          ),

          // Resultado
          Expanded(
            child: BlocBuilder<PhotoBloc, PhotoState>(
              builder: (context, state) {
                if (state is PhotoLoading) {
                  return const Center(child: CircularProgressIndicator());
                } else if (state is PhotoLoaded) {
                  if (state.photos.isEmpty) {
                    return const Center(child: Text('Sin resultados!'));
                  }
                  return ListView.builder(
                    itemCount: state.photos.length,
                    itemBuilder: (context, index) {
                      final photo = state.photos[index];
                      return PhotoCard(photo: photo);
                    },
                  );
                } else if (state is PhotoError) {
                  return Center(child: Text(state.message));
                }
                return const Center(child: Text('Buscar...'));
              },
            ),
          ),
        ],
      ),
    );
  }
}


// === File: features/photos/presentation/pages/photo_detail_page.dart ===
import 'package:fllutterwebservice/features/photos/domain/entities/photo.dart';
import 'package:flutter/material.dart';

// precacheImage(...)	Comienza la descarga de la imagen antes de mostrar el widget
// FutureBuilder	Permite mostrar el loading inmediatamente
// Image.network	Se carga solo después de que la imagen está lista en caché

class PhotoDetailPage extends StatelessWidget {
  const PhotoDetailPage({super.key});

  @override
  Widget build(BuildContext context) {
    final Photo photo = ModalRoute.of(context)!.settings.arguments as Photo;

    return Scaffold(
      appBar: AppBar(
        title: Text(
          photo.title,
          style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // Imagen con precache + loading instantáneo
            viewImage(photo, context),

            const SizedBox(height: 20),

            viewDownloadViews(photo),
            const SizedBox(height: 20),

            Text(
              photo.title,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w200),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  FutureBuilder<void> viewImage(Photo photo, BuildContext context) {
    return FutureBuilder(
      future: precacheImage(NetworkImage(photo.imageUrl), context),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          return Material(
            elevation: 4,
            borderRadius: BorderRadius.circular(13),
            clipBehavior:
                Clip.antiAlias, // Para que la imagen respete los bordes
            child: Image.network(
              photo.imageUrl,
              fit: BoxFit.cover,
              width: double.infinity,
            ),
          );
        } else {
          return Container(
            height: 250,
            width: double.infinity,
            color: Colors.grey.shade200,
            child: const Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                CircularProgressIndicator(),
                SizedBox(height: 12),
                Text(
                  'Cargando imagen...',
                  style: TextStyle(color: Colors.grey),
                ),
              ],
            ),
          );
        }
      },
    );
  }

  Row viewDownloadViews(Photo photo) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        Column(
          children: [
            const Icon(Icons.visibility),
            const SizedBox(height: 4),
            Text('Vistas: ${photo.views}'),
          ],
        ),
        Column(
          children: [
            const Icon(Icons.download),
            const SizedBox(height: 4),
            Text('Descargas: ${photo.downloads}'),
          ],
        ),
      ],
    );
  }
}


// === File: features/photos/presentation/widgets/photo_card.dart ===
import 'package:fllutterwebservice/features/photos/domain/entities/photo.dart';
import 'package:fllutterwebservice/shared/widgets/cached_photo.dart';
import 'package:flutter/material.dart';

class PhotoCard extends StatelessWidget {
  final Photo photo;

  const PhotoCard({super.key, required this.photo});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
      child: InkWell(
        onTap: () {
          Navigator.pushNamed(context, '/detail', arguments: photo);
        },
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Row(
            children: [
              CachedPhoto(
                imageUrl: photo.thumbnailUrl,
                width: 130,
                height: 100,
                fit: BoxFit.cover,
              ),
              const SizedBox(width: 10),

              Expanded(
                child: SizedBox(
                  height: 100, // Coincide con la altura de la imagen
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Título alineado arriba
                      Text(
                        photo.title,
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),

                      const SizedBox(height: 12),

                      // Vistas y descargas
                      Row(
                        children: [
                          const Icon(Icons.visibility, size: 16),
                          const SizedBox(width: 4),
                          Text('${photo.views}'),
                          const SizedBox(width: 12),
                          const Icon(Icons.download, size: 16),
                          const SizedBox(width: 4),
                          Text('${photo.downloads}'),
                        ],
                      ),

                      // Flecha al fondo a la derecha
                      const Spacer(),
                      const Align(
                        alignment: Alignment.bottomRight,
                        child: Icon(Icons.arrow_forward_ios, size: 14),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


// === File: features/photos/presentation/bloc/photo_bloc.dart ===
// BLoC que maneja la lógica de búsqueda de fotos

import 'package:fllutterwebservice/features/photos/domain/usecases/search_photos_usecase.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'photo_event.dart';
import 'photo_state.dart';

class PhotoBloc extends Bloc<PhotoEvent, PhotoState> {
  final SearchPhotosUseCase searchPhotosUseCase;

  PhotoBloc(this.searchPhotosUseCase) : super(PhotoInitial()) {
    on<SearchPhotosEvent>((event, emit) async {
      emit(PhotoLoading());
      try {
        final photos = await searchPhotosUseCase.execute(event.query);
        emit(PhotoLoaded(photos));
      } catch (e) {
        emit(PhotoError('Error al cargar fotos'));
      }
    });
  }
}


// === File: features/photos/presentation/bloc/photo_event.dart ===
// Eventos que puede recibir el BLoC: búsqueda de fotos

import 'package:equatable/equatable.dart';

abstract class PhotoEvent extends Equatable {
  @override
  List<Object?> get props => [];
}

class SearchPhotosEvent extends PhotoEvent {
  final String query;

  SearchPhotosEvent(this.query);

  @override
  List<Object?> get props => [query];
}


// === File: features/photos/presentation/bloc/photo_state.dart ===
// Estados que puede emitir el BLoC: inicial, cargando, con datos o con error

import 'package:equatable/equatable.dart';
import 'package:fllutterwebservice/features/photos/domain/entities/photo.dart';

abstract class PhotoState extends Equatable {
  @override
  List<Object?> get props => [];
}

class PhotoInitial extends PhotoState {}

class PhotoLoading extends PhotoState {}

class PhotoLoaded extends PhotoState {
  final List<Photo> photos;

  PhotoLoaded(this.photos);

  @override
  List<Object?> get props => [photos];
}

class PhotoError extends PhotoState {
  final String message;

  PhotoError(this.message);

  @override
  List<Object?> get props => [message];
}


// === File: shared/widgets/cached_photo.dart ===
import 'package:flutter/material.dart';

/// Widget personalizado que carga una imagen desde red,
/// mostrando un loader mientras se precarga.
class CachedPhoto extends StatelessWidget {
  final String imageUrl;
  final double width;
  final double height;
  final BoxFit fit;

  const CachedPhoto({
    super.key,
    required this.imageUrl,
    this.width = double.infinity,
    this.height = 200,
    this.fit = BoxFit.cover,
  });

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: precacheImage(NetworkImage(imageUrl), context),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          return Image.network(
            imageUrl,
            width: width,
            height: height,
            fit: fit,
          );
        } else {
          return Container(
            width: width,
            height: height,
            color: Colors.grey.shade200,
            child: const Center(
              child: CircularProgressIndicator(),
            ),
          );
        }
      },
    );
  }
}


